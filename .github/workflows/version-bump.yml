name: Version Bump

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version change'
        required: true
        default: 'minor'
        type: choice
        options:
        - major
        - minor
        - patch

jobs:
  version-bump:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Validate package.json
      run: |
        if [ ! -f "package.json" ]; then
          echo "Error: package.json not found"
          exit 1
        fi
        
        # Validate JSON syntax
        node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
        echo "package.json is valid"

    - name: Install dependencies
      run: |
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Determine version type from commit messages
      id: version_type
      if: github.event_name == 'push'
      run: |
        # Get commit messages since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"%s" --since="1 day ago")
        else
          COMMITS=$(git log --pretty=format:"%s" $LAST_TAG..HEAD)
        fi
        
        echo "Analyzing commits:"
        echo "$COMMITS"
        
        # Check for breaking changes or major keywords
        if echo "$COMMITS" | grep -iE "(BREAKING CHANGE|breaking:|major:|feat!:|fix!:)" > /dev/null; then
          echo "type=major" >> $GITHUB_OUTPUT
          echo "Detected MAJOR change"
        # Check for new features
        elif echo "$COMMITS" | grep -iE "(feat:|feature:|add:|new:)" > /dev/null; then
          echo "type=minor" >> $GITHUB_OUTPUT
          echo "Detected MINOR change"
        # Default to patch for bug fixes and other changes
        else
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "Detected PATCH change"
        fi

    - name: Set version type
      id: final_version_type
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          echo "Using manual input: ${{ github.event.inputs.version_type }}"
        else
          echo "type=${{ steps.version_type.outputs.type }}" >> $GITHUB_OUTPUT
          echo "Using detected type: ${{ steps.version_type.outputs.type }}"
        fi

    - name: Bump version
      id: bump_version
      run: |
        VERSION_TYPE="${{ steps.final_version_type.outputs.type }}"
        
        # Use npm version to bump the version
        NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Version bumped from ${{ steps.current_version.outputs.version }} to $NEW_VERSION"

    - name: Update package.json
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json
        git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }} [${{ steps.final_version_type.outputs.type }}]"

    - name: Create and push tag
      run: |
        git tag ${{ steps.bump_version.outputs.new_version }}
        git push origin HEAD:${{ github.ref_name }}
        git push origin ${{ steps.bump_version.outputs.new_version }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.bump_version.outputs.new_version }}
        release_name: Release ${{ steps.bump_version.outputs.new_version }}
        body: |
          ## Changes in ${{ steps.bump_version.outputs.new_version }}
          
          **Version Type:** ${{ steps.final_version_type.outputs.type }}
          **Previous Version:** ${{ steps.current_version.outputs.version }}
          
          ### Commit Messages:
          ${{ github.event.head_commit.message }}
          
          This release was automatically generated by GitHub Actions.
        draft: false
        prerelease: false
